---
- hosts: localhost
  become: yes
  gather_facts: false
  vars_files:
    - secret.yaml

  tasks:
    # Create VPC
    - ec2_vpc_net:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        cidr_block: "{{ vpc_cidr_block }}"
        name: "{{ vpc_name }}"
        region: "{{ region }}"
        dns_support: yes
        dns_hostnames: yes
        tenancy: default
        state: present
      register: vpc_result

    # Create Internet Gateway
    - ec2_vpc_igw:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        vpc_id: "{{ vpc_result.vpc.id }}"
        region: "{{ region }}"
        state: present
        tags:
          Name: "{{ igw_name }}"
      register: igw_result

    # Create Public Subnet
    - ec2_vpc_subnet:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        vpc_id: "{{ vpc_result.vpc.id }}"
        region: "{{ region }}"
        az: "{{ pubzone }}"
        cidr: "{{ pubsubnet_cidr_block }}"
        map_public: yes
        tags:
          Name: "{{ pubsubnet_name }}"
      register: pubsubnet_result

    # Create Private Subnet
    - ec2_vpc_subnet:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        vpc_id: "{{ vpc_result.vpc.id }}"
        region: "{{ region }}"
        az: "{{ pvtzone }}"
        cidr: "{{ pvtsubnet_cidr_block }}"
        map_public: no
        tags:
          Name: "{{ pvtsubnet_name }}"
      register: pvtsubnet_result

    # Create Public Route Table
    - ec2_vpc_route_table:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        vpc_id: "{{ vpc_result.vpc.id }}"
        region: "{{ region }}"
        state: present
        tags:
          Name: "{{ pubroute_table_name }}"
        subnets: [ "{{ pubsubnet_result.subnet.id }}" ]
        routes:
          - dest: "{{ destination_cidr_block }}"
            gateway_id: "{{ igw_result.gateway_id }}"
      register: public_route_table

    # Create Security Group
    - ec2_group:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        vpc_id: "{{ vpc_result.vpc.id }}"
        region: "{{ region }}"
        state: present
        name: "{{ security_group_name }}"
        description: "Allow all traffic"
        tags:
          Name: "{{ security_group_name }}"
        rules:
          - proto: all
            cidr_ip: "{{ destination_cidr_block }}"
            rule_desc: "Allow all traffic"
      register: security_group_results

    # Launch EC2 Instance 1
    - ec2:
        image: "{{ image_id }}"
        instance_type: "{{ type }}"
        region: "{{ region }}"
        key_name: "{{ key_name }}"
        wait: yes
        count: 1
        state: present
        vpc_subnet_id: "{{ pubsubnet_result.subnet.id }}"
        assign_public_ip: yes
        group_id: "{{ security_group_results.group_id }}"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        user_data: "{{ lookup('file', 'data1.sh') }}"
        instance_tags:
          Name: "{{ instance_name1 }}"

    # Launch EC2 Instance 2
    - ec2:
        image: "{{ image_id }}"
        instance_type: "{{ type }}"
        region: "{{ region }}"
        key_name: "{{ key_name }}"
        wait: yes
        count: 1
        state: present
        vpc_subnet_id: "{{ pubsubnet_result.subnet.id }}"
        assign_public_ip: yes
        group_id: "{{ security_group_results.group_id }}"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        user_data: "{{ lookup('file', 'data2.sh') }}"
        instance_tags:
          Name: "{{ instance_name2 }}"
